import math
from sympy import symbols, Eq, solve
class Solver:
    def __init__(self, params):
        self.params = params  # Store the parameters object
        self.theta_1 = self.theta_2 = self.theta_3 = None

    def finding_angles(self):
        opposite_side = self.params['opposite_side_to_angle_theta']
        adjacent_side = self.params['adjacent_side_to_angle_theta']

        theta_1 = math.atan(opposite_side / adjacent_side)
        theta_1_degrees = math.degrees(theta_1)

        distance_to_e = self.params['distance_between_the_supports_a_and_d'] - (
            self.params['horizontal_distance_between_d_and_c'] / math.tan(theta_1)
        )
        theta_2 = math.atan(distance_to_e / self.params['horizontal_distance_between_d_and_b'])
        theta_2_degrees = math.degrees(theta_2)

        theta_3 = math.atan(distance_to_e / self.params['horizontal_distance_between_d_and_c'])


    def solving_for_joint_b(self):
        force_in_a_b, force_in_b_c = symbols('force_in_a_b force_in_b_c')

        y_equation_b = Eq(force_in_a_b * math.sin(self.theta_2) - self.params.f1, 0)
        x_equation_b = Eq(force_in_a_b * math.cos(self.theta_2) + force_in_b_c, 0)

        solutions_joint_b = solve([y_equation_b, x_equation_b], (force_in_a_b, force_in_b_c))
        return solutions_joint_b

    def solving_for_joint_c(self):
        force_in_a_c, force_in_c_d, force_in_b_c = symbols('force_in_a_c force_in_c_d force_in_b_c')

        x_equation_c = Eq(
            force_in_a_c * math.cos(self.theta_3) + force_in_c_d * math.sin(self.theta_3),
            self.params.f1
        )
        y_equation_c = Eq(
            force_in_a_c * math.sin(self.theta_3),
            force_in_c_d * math.sin(self.theta_3) + self.params.f2
        )

        solutions_joint_c = solve([x_equation_c, y_equation_c], (force_in_a_c, force_in_c_d))
        return solutions_joint_c

    def solving_for_joint_d(self):
        force_in_a_d, force_in_c_d = symbols('force_in_a_d force_in_c_d')

        y_equation = Eq(force_in_a_d + force_in_c_d * math.cos(self.theta_1), 0)
        solution_joint_d = solve(y_equation, force_in_a_d)
        return solution_joint_d
